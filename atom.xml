<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[一亩三分田]]></title>
  <link href="http://cnupdog.github.io/atom.xml" rel="self"/>
  <link href="http://cnupdog.github.io/"/>
  <updated>2014-02-03T18:42:34+08:00</updated>
  <id>http://cnupdog.github.io/</id>
  <author>
    <name><![CDATA[cnupdog@gmail.com]]></name>
    <email><![CDATA[cnupdog@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WEB服务器初步了解]]></title>
    <link href="http://cnupdog.github.io/blog/2014/02/03/webfu-wu-qi-chu-bu-liao-jie/"/>
    <updated>2014-02-03T18:41:43+08:00</updated>
    <id>http://cnupdog.github.io/blog/2014/02/03/webfu-wu-qi-chu-bu-liao-jie</id>
    <content type="html"><![CDATA[<pre><code>WEB服务器主要作用两点：处理静态资源；将动态请求分发到后台应用服务器，充当桥梁。
目前最流行的HTTP服务器主要有：Apche \ Nginx \ Lighttpd \ IIS(主要服务于ASP程序)。 
工作需要，所以重点了解了一下Apche和Nginx及两者之间的优缺点。
</code></pre>

<h2>Apche </h2>

<blockquote><p>许可协议：Apache License 2.0<br/>
官方地址：<a href="http://www.apache.org">http://www.apache.org</a></p></blockquote>

<p>Apahce是世界使用排名第一的WEB服务器软件，最大的特点是有良好的跨平台性和安全性，名字取自&#8221;A patchy server&#8221;的读音，即充满补丁的服务器，作为自由软件，有成千上万人为它开发新功能，修复缺陷。</p>

<h2>Nginx</h2>

<blockquote><p>许可协议：BSD-like<br/>
官方地址：<a href="http://www.nginx.net">http://www.nginx.net</a></p></blockquote>

<p>Nginx是一个十分轻量级的服务器，读音&#8221;engine X&#8221;。它以事件驱动的方式编写，所以有非常好的性能，同时也是有高效的反向代理、负载均衡功能。它本身就是一个反向代理服务器，并且支持七层负载均衡。</p>

<h2><strong><em>Apache</em></strong> VS <strong><em>Nginx</em></strong></h2>

<p>其实对两者进行对比并不合适，Apahce更适合做后端服务器，处理功能请求；Nginx更适合做前端服务器，处理大量静态页面的请求。所以现在很多集群站，都是前端用Nginx抗并发，后端Apache处理请求。这里很随意的列举一些知识点，只是为了做备忘。</p>

<ol>
<li><p>对于处理万级并发连接请求，Nginx可能仅使用几M内存，而Apache可能要使用几百M的内存资源</p>

<blockquote><p>Apache：Process-based Server，同步多进程模型，即一个连接对应一个进程</p>

<p>Nginx：Asynchronous Server，异步多进程模型，即多个连接&#8217;万级别&#8217;可以对应一个进程。异步服务器是事件驱动，除了用户的并发请求只需要单一的或者几个线程。它处理请求是异步非阻塞，因此能保持低资源低消耗高性能。</p></blockquote></li>
<li><p>Nginx处理动态请求是鸡肋，一般动态请求交由Apache完成，Nginx负责处理静态请求和反向代理</p>

<blockquote><p>Apache: 通过mod_proxy实现反向代理，通过mod_cache实现缓存功能。</p></blockquote></li>
<li><p>反向代理从传输上可以分为同步和异步两种模式，Apache使用的是同步，Nginx使用的是异步。所以Nginx可以减少后端连接数，和负担</p>

<blockquote><p>同步模式（Apache的mod_proxy）：浏览器发起请求，而后请求会被立刻转到后台，于是浏览器和后台之间就建立了一个通道，在请求结束之前该通道是一直存在的。这样会加重后端服务器的负担</p>

<p>异步模式（Nginx）：浏览器发起请求，将请求数据(header)先收到Nginx上，然后Nginx再将这个请求发到后端，后端处理完之后把数据返回到Nginx上，由Nginx将数据流发到浏览器。这样能令负载均衡器更有保障，在前面那种同步模式中，请求都是只有一次机会，如果某台后端服务器刚好挂了，那么请求就失败了。而异步模式的话，这个请求会被发送到其他的后端服务器。</p></blockquote></li>
<li><p>稳定性：Apache发展历史悠久，功能上bug相对较少。Nginx采取分阶段资源分配技术，使得它的CPU和内存占用率非常低，并且支持热部署，能在不间断服务的情况下，对软件版本进行升级，从另外一个侧面显示其稳定性的一面。</p>

<blockquote><p>对于那些没有活动的连接，比如10000个，它们对Nginx其实毫无影响，只占几M内存资源，所以类似DOS攻击对Nginx服务器毫无作用</p></blockquote></li>
</ol>


<p>&mdash;未完待补充&mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linode VPS搭建OPENVPN]]></title>
    <link href="http://cnupdog.github.io/blog/2014/02/03/linode-vpsda-jian-openvpn/"/>
    <updated>2014-02-03T18:39:20+08:00</updated>
    <id>http://cnupdog.github.io/blog/2014/02/03/linode-vpsda-jian-openvpn</id>
    <content type="html"><![CDATA[<p>一直想租台VPS，安装想要的OS，搭建Web服务器，也顺便搭建各种代理，上国内无法上的网站。查了一些资料，最终挑选了Linode提供的VPS（512M内存, 16GB硬盘, 200GB流量/月 = <strong>$19.95</strong>/月，最低配置）<br/>
有同样需求却不知道如何挑选VPS主机商的朋友可以参照：<a href="http://www.zhihu.com/question/19904241">哪款海外 VPS 性价比高？</a></p>

<h2>如何购买VPS</h2>

<p>前人已经总结了：<a href="http://linode.ofeva.com/">Linode VPS使用和购买指南</a></p>

<p>另外需要注意几点：<br/>
1. <strong>如何续费？</strong>绑定信用卡会自己扣费。<br/>
2. <strong>停止服务？</strong>在Linode面板中将所有Linode都Remove掉即可，会自动按照剩余时常退回到Linode帐号中（有任何问题都可以发送Ticket过去，一般2分钟即可获得答复）<br/>
3. <strong>挑选机房？</strong>Linode提供6个机房，建议选择<strong>Fremont</strong>，不建议选择<del>Tokyo</del>，虽然是最新的机房，但大量中国的新用户涌入使用，延迟开始大了，另外还可能因为中日关系交恶而收到影响。<br/>
4. <strong>OS选择？</strong>很奇怪现在大多人都选择安装Ubuntu当server OS，但我还是最终选择了更传统的CENTOS6，因为CentOS和RedHat Enterprise源码一样，RHEL每五年左右更新一次，稳定安全且使得我们几乎不用去考虑升级的问题，另外我非常喜欢用yum命令（下载、升级软件超级方便）。</p>

<h2>通过OpenVPN部署VPN服务</h2>

<p>这点Linode的官方Guides写的非常详细，可以直接参考<a href="http://library.linode.com/networking/openvpn">Secure Communications with OpenVPN on CentOS 6</a></p>

<h3>步骤及说明</h3>

<ol>
<li>rpm -Uvh <a href="http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm">http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm</a></li>
<li>yum update</li>
<li>yum install openvpn</li>
<li>cp -R /usr/share/openvpn/easy-rsa/ /etc/openvpn</li>
<li>vim /etc/openvpn/easy-rsa/2.0/vars</li>
<li>cd /etc/openvpn/easy-rsa/2.0/</li>
<li>cp /etc/openvpn/easy-rsa/2.0/openssl-1.0.0.cnf openssl.cnf</li>
<li>. /etc/openvpn/easy-rsa/2.0/vars</li>
<li>. /etc/openvpn/easy-rsa/2.0/clean-all</li>
<li>. /etc/openvpn/easy-rsa/2.0/build-ca</li>
<li>. /etc/openvpn/easy-rsa/2.0/build-key-server server</li>
<li>. /etc/openvpn/easy-rsa/2.0/build-key client-cnupdog</li>
<li>. /etc/openvpn/easy-rsa/2.0/build-dh</li>
<li>cd /etc/openvpn/easy-rsa/2.0/keys</li>
<li>cp ca.crt ca.key dh1024.pem server.crt server.key /etc/openvpn</li>
<li>cp /usr/share/doc/openvpn-2.2.2/sample-config-files/server.conf /etc/openvpn/</li>
<li>vim /etc/openvpn/server.conf</li>
<li>cp /usr/share/doc/openvpn-2.2.2/sample-config-files/client.conf ~/cnupdog-client.conf</li>
<li>iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE</li>
<li>vim /etc/sysctl.conf(修改为net.ipv4.ip_forward=1)</li>
<li>sysctl -p</li>
<li>vim /etc/rc.local</li>
</ol>


<h3>补充说明</h3>

<p><strong>[Step 5]</strong>  服务端配置文件可以server.conf可以参考如下：</p>

<pre><code>dev tun
port 1194
proto udp
ca /etc/openvpn/ca.crt
cert /etc/openvpn/server.crt
key /etc/openvpn/server.key
dh /etc/openvpn/dh1024.pem
persist-key
persist-tun
server 10.8.0.0 255.255.255.0
keepalive 20 120
client-to-client
comp-lzo
ifconfig-pool-persist ipp.txt
status /etc/openvpn/openvpn-status.log
verb 3
push "redirect-gateway def1"
</code></pre>

<p><strong>[Step 18]</strong>  客户端配置文件可以client.ovpn可以参考如下：</p>

<pre><code>dev tun
client
proto udp
persist-tun
persist-key
resolv-retry infinite
mute-replay-warnings
remote 192.81.129.40 1194
ca ca.crt
cert client-cnupdog.crt
key client-cnupdog.key
comp-lzo
verb 3
</code></pre>

<p><strong>[Step 22]</strong>  修改追加内容到rc.local以保证每次重启机器规则能自动生效</p>

<pre><code>openvpn --config /etc/openvpn/server.conf &gt; /dev/null 2&gt;&amp;1 &amp; 
iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE
</code></pre>

<p>-EOF-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始使用Django(一)]]></title>
    <link href="http://cnupdog.github.io/blog/2014/02/03/kai-shi-shi-yong-django-1/"/>
    <updated>2014-02-03T18:24:55+08:00</updated>
    <id>http://cnupdog.github.io/blog/2014/02/03/kai-shi-shi-yong-django-1</id>
    <content type="html"><![CDATA[<p> 在开始学习使用Django之后，第一次遇到的难题就是静态文件（static）的配置，网上资料很多，但也经过多次失败的尝试。所以决心理清这块内容的实际原理。</p>

<h2>Django目录结构</h2>

<p>Django本身没有制定标准的目录结构规范，所以我们会看到不同的项目目录结构，当然也对应着不同的配置文件。但对于有代码洁癖的人来说，想从一开始就<code>最佳实践</code>。<br/>
在<a href="http://yangyubo.com/django-best-practices">Django最佳实践</a>中有推荐的布局，如下：<br/>
<img src="http://cnupdog.github.io/assets/img/django/django-project-dirs.jpg" alt="Django项目推荐布局" title="Django项目推荐布局" width="100%" />
当然目前基于开发比较多的是WEB应用，我们可以将项目（Project）定位为一个平台，应用（App）定位为一个模块。</p>

<p>其中静态文件夹有两种部署模式：“分布式“、“集中式“。分布式是在各个APP下建立static文件夹并包含img\css\js文件。集中式是在Project路径下建立static文件夹并包含img\css\js文件，即统一管理所有App使用到的静态资源。</p>

<h2>Django如何处理静态文件（基本原理）</h2>

<p>在实际的WEB站点中，静态文件一般是单独处理，例如使用naginx作为静态文件服务器或者使用CDN进行静态资源加速。当然Django中也可以这么去处理，Django在开发环境这么去处理静态文件：通过一系列的配置（setting.py指定静态文件的路径，url.py添加url匹配路由），然后交由Django内置的django.views.static.server()来处理。</p>

<h2>Django如何处理静态文件（详细配置）</h2>

<p>以下的详细配置，是基于Django1.4，并且准备采用“集中式”静态文件管理方式来阐述的。</p>

<p><code>setting.py</code>有如下几个重要配置需要注意：</p>

<p>STATIC_ROOT:  运行collectstatic，所有app中的静态文件包括在STATICFILES_DIRS中指定的都会手机到此目录，这在部署的时候很方便，开发的时候可以忽略此设置。（建议留空！）</p>

<p>STATIC_URL:  用来配置静态文件请求的URL前缀，例如域名<a href="http://www.ooxx.com%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%BD%A0%E7%9A%84STATIC_URL=">http://www.ooxx.com%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%BD%A0%E7%9A%84STATIC_URL=</a>&lsquo;/static/&#8217;，那么你访问静态文件的URL将类似<a href="http://www.ooxx.com/static/img/xixihaha.jpg">http://www.ooxx.com/static/img/xixihaha.jpg</a></p>

<p>ADMIN_MEDIA_PREFIX:  是Django后台管理模块使用的静态文件配置。</p>

<p>STATICFILES_DIRS:  （默认情况下staticfiles认为静态文件是存放在各app的static目录下）这是静态文件放置的目录，我们如果采用“集中式”管理静态文件，即static文件夹在项目的根目录下和App平级。为了移植方便，可以这么去配置：</p>

<pre><code>BASE = os.path.dirname(os.path.abspath(__file__))  
STATICFILES_DIRS = (os.path.join(BASE,'static').replace('\\','/'),)
</code></pre>

<p><code>url.py</code>对应也需要配置，在末尾增加：</p>

<pre><code>urlpatterns += staticfiles_urlpatterns() #静态文件的路由
</code></pre>

<p>上面的配置结束后，我们就可以这么去使用了：</p>

<pre><code>&lt;link rel="stylesheet" href="css/bootstrap/bootstrap.css" /&gt;  
</code></pre>

<p>-EOF-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你好，杰克尔！]]></title>
    <link href="http://cnupdog.github.io/blog/2014/02/03/ni-hao-%2Cjie-ke-er-%21/"/>
    <updated>2014-02-03T18:17:21+08:00</updated>
    <id>http://cnupdog.github.io/blog/2014/02/03/ni-hao-,jie-ke-er-!</id>
    <content type="html"><![CDATA[<p>Jekyll(<code>发音/'dʒiːk əl/，"杰克尔"</code>)是一个静态站点生成器，它会根据网页源码生成静态文件。它提供了模板（推荐使用<a href="http://jekyllbootstrap.com">@Jekyllbootstrap</a>）、变量、插件等功能。</p>

<p>  用Jekyll可以轻而易举的搭建出博客，尤其适合技术博客。你可别指望这把小匕首有WordPress那样的良好体验、强大功能，但它能为我们提供：</p>

<ul>
<li>理想的写作环境（使用<code>markdown</code>，不再忧虑排版，可专注写作）</li>
<li>更好的代码管理（使用<code>git</code>，你将体验并且感受分布式代码管理的便捷）</li>
<li>屌丝的搭建方式（使用<code>github</code>，可以省下虚拟主机和数据库服务，直接在其之上托管整个网站）</li>
<li>全面的插件服务（使用<code>disqus</code>、<code>gravatar</code>、<code>highlightJS</code>等等）</li>
</ul>


<p>   下面是搭建本站参考的一些资料：</p>

<ul>
<li> <a href="http://www.v2ex.com/t/25779">Jekyll-bootstrap教程</a></li>
<li> <a href="http://www.feimos.com/translation_markdown_the_ins_and_outs/">Markdown:输入与输出</a></li>
<li> <a href="http://jiyeqian.github.com/2011/09/introduction-to-git/">GIT速查手册</a></li>
<li> <a href="https://www.dnspod.cn/Support">DNSPod官方帮助中心</a></li>
</ul>


<p>   -EOF-</p>
]]></content>
  </entry>
  
</feed>
